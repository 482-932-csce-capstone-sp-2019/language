using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class writtenInput : MonoBehaviour
{
    public GameObject line;
    public Shader hehe;


    private Stack<Point> points;
    private List<Stroke> strokes;
    private List<Character> characters;
    List<GameObject> renderers;
    bool isMouseUp;
    bool wait;
    int numPoints;
    int tmpCount;
    float lastXCord = -1;
    int lastStrokeIndex = 0;
    Dictionary<String, int> singleStrokeMappings;


    private float writeBoxLeftBound;
    private float writeBoxUpperBound;
    private float writeBoxRightBound;
    private float writeBoxLowerBound;
    private GuiController guiController;


    // Start is called before the first frame update
    void Start()
    {
    }

    public void WriteBoxOpened()
    {
        points = new Stack<Point>();
        strokes = new List<Stroke>();
        renderers = new List<GameObject>();
        characters = new List<Character>();
        singleStrokeMappings = new Dictionary<String, int>();
        singleStrokeMappings.Add("vertical line", 1);
        singleStrokeMappings.Add("horizontal line", 2);
        singleStrokeMappings.Add("g", 11);
        singleStrokeMappings.Add("n", 12);
        singleStrokeMappings.Add("circle", 18);

        guiController = GameObject.FindGameObjectWithTag("GUI").GetComponent<GuiController>();


        isMouseUp = false;
        wait = true;
        numPoints = 0;
        tmpCount = 0;
        lastXCord = -1;
        lastStrokeIndex = 0;
        GameObject curObj = Instantiate(line);
        renderers.Add(curObj);
        LineRenderer drawLine = renderers[tmpCount].GetComponent<LineRenderer>();
        drawLine.sortingLayerName = "Foreground";
        drawLine.material = new Material(hehe);
        drawLine.widthMultiplier = 0.2f;
        drawLine.positionCount = 0;
        //Get Write Box's height, width, and corners in world coordinates
        RectTransform writeBox = gameObject.GetComponent<RectTransform>();
        float width = writeBox.rect.width;
        float height = writeBox.rect.height;
        Vector3[] v = new Vector3[4];
        writeBox.GetWorldCorners(v);

        //Restrict written input to slightly inside of the write box's borders
        writeBoxLeftBound = v[0].x + v[2].x * .025f;
        writeBoxRightBound = v[2].x - v[2].x * .025f;
        writeBoxLowerBound = v[0].y + v[2].y * .025f;
        writeBoxUpperBound = v[2].y - v[2].y * .025f;
        InvokeRepeating("collectPoints", 0, 0.0167f);
    }

    // Changed Update to invoke repeating
    public void collectPoints()
    {
        //If stylus does collect points, else do not
        if (Input.GetMouseButtonDown(0) || Input.GetMouseButton(0))
        {
            wait = false;
            isMouseUp = false;
        }
        else
        {
            isMouseUp = true;
        }
        //Wait if the stylus is not down
        if (!wait)
        {
            float convertedX = Camera.main.ScreenToWorldPoint(Input.mousePosition).x;
            float convertedY = Camera.main.ScreenToWorldPoint(Input.mousePosition).y;

            if (isMouseUp)
            {
                if (Input.mousePosition.x > writeBoxLeftBound &&
                    Input.mousePosition.x < writeBoxRightBound &&
                    Input.mousePosition.y > writeBoxLowerBound &&
                    Input.mousePosition.y < writeBoxUpperBound &&
                    guiController.WriteBox.activeSelf &&
                    points.Count > 1)
                {
                    //Store stroke and create a new line render for the next line
                    strokes.Add(new Stroke(points.Distinct().ToList()));
                    if (lastXCord != -1)
                    {
                        //Determine if a new character is being input based on space between strokes with regards to change in x value
                        if (((Math.Abs(strokes[strokes.Count - 1].getStart().x - lastXCord) > 1.5)
                            && (Math.Abs(strokes[strokes.Count - 1].getEnd().x - lastXCord) > 1.5)))
                        {
                            //print("LAST STROKE INDEX: " + lastStrokeIndex);
                            characters.Add(new Character(strokes.GetRange(lastStrokeIndex, strokes.Count - lastStrokeIndex - 1)));
                            //print("CHARACTERS SIZE: " + characters.Count + " AND stroke count" + characters[characters.Count - 1].strokes.Count);
                            lastStrokeIndex = strokes.Count - 1;
                        }
                    }
                    renderers.Add(Instantiate(line));
                    LineRenderer drawLine = renderers[renderers.Count - 1].GetComponent<LineRenderer>();
                    drawLine.sortingLayerName = "Foreground";
                    drawLine.material = new Material(hehe);
                    drawLine.widthMultiplier = 0.2f;
                    drawLine.positionCount = 0;
                    tmpCount = 0;
                    numPoints += strokes.Count;
                    points.Clear();
                    lastXCord = convertedX;
                    wait = true;
                }
            }
            else
            {
                if (Input.mousePosition.x > writeBoxLeftBound &&
                    Input.mousePosition.x < writeBoxRightBound &&
                    Input.mousePosition.y > writeBoxLowerBound &&
                    Input.mousePosition.y < writeBoxUpperBound &&
                    guiController.WriteBox.activeSelf)
                {
                    Point curPoint = new Point(convertedX, convertedY);
                    try
                    {
                        Point topPoint = points.Peek();
                        //Do not add the collected point if it was already added right before
                        if (Point.checkEquality(curPoint, topPoint))
                            return;
                        points.Push(curPoint);
                        if (renderers[Math.Max(strokes.Count, 0)].GetComponent<LineRenderer>() != null)
                        {
                            LineRenderer curLine = renderers[Math.Max(strokes.Count, 0)].GetComponent<LineRenderer>();
                            curLine.sortingLayerName = "Foreground";
                            curLine.positionCount = tmpCount + 1;
                            curLine.SetPosition(tmpCount, new Vector3(convertedX, convertedY, 0));
                            ++tmpCount;
                        }
                    }
                    catch (InvalidOperationException)
                    {
                        points.Push(curPoint);
                        if (renderers[Math.Max(strokes.Count, 0)].GetComponent<LineRenderer>() != null)
                        {
                            LineRenderer curLine = renderers[Math.Max(strokes.Count, 0)].GetComponent<LineRenderer>();
                            curLine.sortingLayerName = "Foreground";
                            curLine.positionCount = tmpCount + 1;
                            curLine.SetPosition(tmpCount, new Vector3(convertedX, convertedY, 0));
                            ++tmpCount;
                        }
                    }
                    return;
                }
            }
        }
    }

    public void Clear()
    {
        GameObject[] curStrokes = GameObject.FindGameObjectsWithTag("Stroke");
        foreach (GameObject stroke in curStrokes)
        {
            Destroy(stroke);
        }
        strokes.Clear();
        points.Clear();
        characters.Clear();
        renderers.Clear();
        GameObject curObj = Instantiate(line);
        renderers.Add(curObj);
        LineRenderer drawLine = renderers[tmpCount].GetComponent<LineRenderer>();
        drawLine.sortingLayerName = "Foreground";
        drawLine.material = new Material(hehe);
        drawLine.widthMultiplier = 0.2f;
        drawLine.positionCount = 0;
        lastStrokeIndex = 0;
        lastXCord = -1;
    }

    public float strokeLength(List<Point> p)
    {
        double dist = 0;
        for (int i = 0; i < p.Count - 1; i++)
        {
            dist += Math.Sqrt((p[i].x - p[i + 1].x) * (p[i].x - p[i + 1].x) + (p[i].y - p[i + 1].y) * (p[i].y - p[i + 1].y));
        }
        return (float)dist;
    }

    public bool closedFigureTest(List<Point> p)
    {
        double dist = Math.Sqrt((p[0].x - p[p.Count - 1].x) * (p[0].x - p[p.Count - 1].x) + (p[0].y - p[p.Count - 1].y) * (p[0].y - p[p.Count - 1].y));
        if ((dist / strokeLength(p)) - .2 < 1E-7)
            return true;
        return false;
    }

	 public bool DLineTest(List<Point> points)
    {
        //least squares line
        double m, b;
        double s1, sx, sy, sxx, sxy;
        s1 = points.Count;
        sx = sy = sxx = sxy = 0;
        foreach (Point p in points)
        {
            sx += p.x;
            sy += p.y;
            sxx += p.x * p.x;
            sxy += p.x * p.y;
        }
        m = (sxy * s1 - sx * sy) / (sxx * s1 - sx * sx);
        b = (sxy * sx - sy * sxx) / (sx * sx - s1 * sxx);

        //error
        double total = 0, error;
        foreach (Point p in points)
        {
            double dy = p.y - (m * p.x + b);
            total += dy * dy;
        }
        error = Math.Sqrt(total);

        //check if line and if slope is around 1 or -1
        if (error - 1 < 1E-7 && Math.Abs(m) < 1.3 && Math.Abs(m) > 0.7)
            return true;
        return false;
    }
    public bool VLineTest(List<Point> points)
    {
        double sx = 0;
        foreach (Point p in points)
        {
            sx += p.x;
        }
        double avgx = sx / points.Count;

        //error
        double errorx, totalx;
        totalx = 0;
        foreach (Point p in points)
        {
            double dx = p.x - avgx;
            totalx += dx * dx;
        }
        errorx = Math.Sqrt(totalx);
        if (errorx - 1 < 1E-7)
            return true;
        return false;
    }

    public bool HLineTest(List<Point> points)
    {
        double sy = 0;
        foreach (Point p in points)
        {
            sy += p.y;
        }
        double avgy = sy / points.Count;

        //error
        double errory, totaly;
        totaly = 0;
        foreach (Point p in points)
        {
            double dy = p.y - avgy;
            totaly += dy * dy;
        }
        errory = Math.Sqrt(totaly);
        if (errory - 1 < 1E-7)
            return true;
        return false;
    }

    public bool circleTest(List<Point> points)
    {
        // check if closed figure
        if (!closedFigureTest(points)) return false;

        double sx = 0, sy = 0;
        foreach (Point p in points)
        {
            sx += p.x;
            sy += p.y;
        }

        //ideal center
        double ix, iy;
        ix = sx / points.Count;
        iy = sy / points.Count;

        //ideal radius
        double irsq, distsq = 0;
        foreach (Point p in points)
        {
            distsq += ((ix - p.x) * (ix - p.x) + (iy - p.y) * (iy - p.y));
        }
        irsq = distsq / points.Count;

        //error
        double total = 0, avgError;
        foreach (Point p in points)
        {
            double diff = irsq - ((ix - p.x) * (ix - p.x) + (iy - p.y) * (iy - p.y));
            total += diff * diff;
        }
        avgError = Math.Sqrt(total/points.Count);

        if (avgError - 1.5 < 1E-7)
            return true;
        return false;
    }

    public bool gTest(List<Point> points)
    {
        int leeway = (int)(points.Count / 20.0);
        
        //check if first half is horizontal and second half is vertical
        if (HLineTest(points.GetRange(leeway, (points.Count / 2) - (2 * leeway))) &&
            VLineTest(points.GetRange(points.Count / 2 + leeway, (points.Count / 2) - (2 * leeway))) &&
            points[leeway].x < points[points.Count / 2].x &&
            points[points.Count / 2].y > points[points.Count - 1].y)
            return true;

        return false;
    }

    public bool nTest(List<Point> points)
    {
        int leeway = (int)(points.Count / 20.0);

        //check if first half is vertical and second half is horizontal
        if (VLineTest(points.GetRange(leeway, (points.Count / 2) - (2 * leeway))) &&
            HLineTest(points.GetRange(points.Count / 2 + leeway, (points.Count / 2) - (2 * leeway))) &&
            points[leeway].y > points[points.Count / 2].y &&
            points[points.Count / 2].x < points[points.Count - 1].x)
            return true;

        return false;
    }
    
    public bool sharpTest(List<Point> points)
    {
        int leeway = (int)(points.Count / 20.0);

        //check if first half is horizontal and second half is diagonal
        if (HLineTest(points.GetRange(leeway, (points.Count / 2) - (2 * leeway))) &&
            DLineTest(points.GetRange(points.Count / 2 + leeway, (points.Count / 2) - (2 * leeway))) &&
            points[leeway].x < points[points.Count / 2].x &&
            points[points.Count / 2].x > points[points.Count - 1].x &&
            points[points.Count / 2].y > points[points.Count - 1].y)
            return true;

        return false;
    }

    // Recognizer
    public List<string> SubmitInput(List<GameObject> inputBoxes)
    {
    	foreach (var item in inputBoxes)
        {
            print("input box pos: " + item.transform.position);
        }
    	
        List<string> blockNums = new List<string>();
        if (lastStrokeIndex != strokes.Count)
        {
            characters.Add(new Character(strokes.GetRange(lastStrokeIndex, strokes.Count - lastStrokeIndex)));
            lastStrokeIndex = strokes.Count - 1;
        }
        int count = 1;
        foreach (Character character in characters)
        {
            //print("COUNT: " + character.strokes.Count);
            foreach (Stroke stroke in character.strokes)
            {
                // stroke testing
                if (DLineTest(stroke.points))
                {
                    stroke.category = "diagonal line";
                }
                else if (VLineTest(stroke.points))
                {
                    stroke.category = "vertical line";
                }
                else if (HLineTest(stroke.points))
                {
                    stroke.category = "horizontal line";
                }
                else if (sharpTest(stroke.points))
                {
                    stroke.category = "sharp";
                }
                else if (gTest(stroke.points))
                {
                    stroke.category = "g";
                }
                else if (nTest(stroke.points))
                {
                    stroke.category = "n";
                }
                else if (circleTest(stroke.points))
                {
                    stroke.category = "circle";
                }

                //print(count + ": " + stroke.category);
                count++;
            }
            //Interpret recognized strokes
            if (character.strokes.Count == 1)
            {
                blockNums.Add(singleStrokeMappings[character.strokes[0].category].ToString());
            }
            else
            {
                multipleStrokeInterpreter(character, ref blockNums);
            }
            //Handle polylines where there is one stroke
        }
        //Used to test
        count = 1;
        foreach (string num in blockNums)
        {
            //print(count + ") " + num);
            count++;
        }
        return blockNums;
    }

    //Process a character with multiple strokes and add mapped korean character num to the return list
    void multipleStrokeInterpreter(Character curChar, ref List<string> nums)
    {
        //need to analyze the strokes, their position, and orientation to determine which korean character
        //to map to
        int numStrokes = curChar.strokes.Count;
        if (numStrokes == 2)
        {
            Stroke firstStroke = curChar.strokes[0];
            Stroke secondStroke = curChar.strokes[1];

            //Handles block nums 3, 5, 7, 9, 13, 17, 
            //Figure out stroke order and then look at relative positions to map to the correct character
            if (firstStroke.category == "vertical line"
                && secondStroke.category == "horizontal line")
            {
                //3, 7
                if ((Math.Abs(firstStroke.getEnd().x - secondStroke.getStart().x) < 0.1))
                {
                    nums.Add("3");
                }else if((Math.Abs(firstStroke.getEnd().y - secondStroke.getStart().y) < 0.1))
                {
                    nums.Add("7");
                }
            }else if (firstStroke.category == "horizontal line"
                       && secondStroke.category == "vertical line")
            {
                //nums 5, 9
                if ((Math.Abs(firstStroke.getEnd().x - secondStroke.getStart().x) < 0.1))
                {
                    nums.Add("5");
                }
                else if ((Math.Abs(firstStroke.getEnd().y - secondStroke.getStart().y) < 0.1))
                {
                    nums.Add("9");
                }
            }else if (firstStroke.category == "horizontal line"
                      && secondStroke.category == "n")
            {
                nums.Add("13");
            }else if(curChar.strokes.Count == 3)
            {
                //need 17, but takes diagonal lines
            }
        }
        else if (numStrokes == 3)
        {
            //Handles block nums 4, 6, 8, 10, 14, 15, 19, 20, 21, 22, 24
        }
        else if (numStrokes == 4)
        {
            //Handles block nums 16 and 23
        }
    }
}

public class Point
{
    public float x;
    public float y;

    public Point()
    {
        x = -1;
        y = -1;
    }
    public Point(float xv, float yv)
    {
        x = xv;
        y = yv;
    }
    static public bool checkEquality(Point p1, Point p2)
    {
        if (p1.x == p2.x)
            if (p1.y == p2.y)
                return true;
        return false;
    }
}

public class Stroke
{
    public List<Point> points;
    public String category;

    public Stroke()
    {
        points = new List<Point>();
        category = "raw";
    }
    public Stroke(List<Point> curPoints)
    {
        points = new List<Point>(curPoints.ToList<Point>());
        points.Reverse();
        category = "raw";
    }
    public Point getStart()
    {
        return points[0];
    }
    public Point getEnd()
    {
        return points[points.Count - 1];
    }
}

public class Character
{
    public List<Stroke> strokes;
    public Character()
    {
        strokes = new List<Stroke>();
    }
    public Character(List<Stroke> curStrokes)
    {
        strokes = new List<Stroke>(curStrokes);
    }
}